Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 


Кафедра програмної інженерії
 


Звіт
з практичної роботи №1
з дисципліни «Скриптові мови програмування»






Виконав:                                                           	     Перевірив:
ст. гр. ПЗПІ-23-3                                    	       	     ст. викл. Сокорчук І. П.
Римчук Д. О.







Харків 2025
1 ІСТОРІЯ ЗМІН
№
Дата
Версія звіту
Опис змін та виправлень
1
04.06.2025
0.1
Оформлено текстовий звіт

2 ЗАВДАННЯ
     - Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
     - Ялинка повинна бути симетричною.
     - Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»
     - Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
     - Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
     - Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.
     - Параметри скрипта повинні мати додатнє значення.
     - Вказані значення повинні округлятися до потрібних у меншу сторону.
     - Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у                батьківський процес.
     - У скрипті потрібно обовʼязково використати конструкції, наведені нижче.
if ... then ... fi
while ... do ... done
until ... do ... done
for ... in .. do ... done
for ((...)); do ... done
- У скрипті також потрібно використати функцію.

3 ОПИС ВИКОНАНОЇ РОБОТИ
     - Було розроблено Bash-скрипт із дотриманням умов практичного завдання.
     - Реалізовано функцію для побудови одного ярусу гілок. 
     - Побудова ярусу виконувалась із використанням циклу until, внутрішнього циклу for та розрахунку пробілів і символів.
     - Для повної побудови ялинки використовувались цикли: until, for, while. 
     - Реалізовано перевірку аргументів з умовними блоками if та перевірками на кількість і правильність значень. У випадку помилкових даних виводяться повідомлення у stderr.
     - Реалізовано чергування символів * та # у рядках ярусів.
     - Забезпечено обмеження максимальної ширини ярусів: вона повинна бути на 2 меншою за ширину снігу.
     - Додано стовбур та нижній шар снігу з фіксованою висотою та шириною, пропорційно вирівняні до центру.
     - Результати роботи подано у вигляді рисунків Б1-Б4.

4 ВИСНОВКИ
     - У результаті виконання практичної роботи було створено Bash-скрипт, що будує симетричну ялинку.
     - Отримано практичні навички використання конструкцій умов (if) та циклів (for, while, until).
     - Реалізовано перевірку параметрів командного рядка, ключів довідки та версії.
     - Побудовано універсальний скрипт з функцією, перевірками та правильним формуванням виводу.
     - Обробка помилок реалізована через stderr із відповідними кодами завершення.
     - Реалізоване рішення відповідає вимогам завдання.
     - Забезпечено коректну роботу з файловими правами та безпекою скрипта.








ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://www.youtube.com/watch?v=ZV0xqanFr1c

Хронологічний опис відеозапису:
00:00 — Вступ та опис завдання.
01:00 — Початок пояснення коду починаючи з функцій показ допомоги, показ версії та перевірки аргументів зі збереженням у відповідні змінні.
04:42 — Пояснення функції для побудови ярусів гілок ялинки та виклик цієї функції.
07:00 — Пояснення побудови стовбура та шару снігу.
07:36 — Тестування скрипта.


ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 — Використання без аргументів


Рисунок Б.2 — Використання команди –help


Рисунок Б.3 — Використання команди –version


Рисунок Б.4 — Правильний результат ялинки


ДОДАТОК В
Програмний код
Головний скрипт на bash
GitHub репозиторій: https://github.com/NureRymchukDanylo/smp-pzpi-23-3-rymchuk-danylo/blob/main/Pract1/smp-pzpi-23-3-rymchuk-danylo-pract1/smp-pzpi-23-3-rymchuk-danylo-pract1-code.sh

 1  #!/bin/bash
 2  
 3  function print_help() {
 4      echo "Використання: $0 [--help | --version] | [висота_ялинки ширина_снігу]"
 5  }
 6  
 7  function print_version() {
 8      echo "Програма $0, версія 0.1"
 9  }
10  
11  if [[ "$1" == "--help" ]]; then
12      print_help
13      exit 0
14  elif [[ "$1" == "--version" ]]; then
15      print_version
16      exit 0
17  fi
18  
19  if [ "$#" -ne 2 ]; then
20      print_help
21      exit 1
22  fi
23  
24  half_height=$(( $1 / 2 ))
25  full_height=$(( half_height * 2 ))
26  
27  snow_width=$2
28  if (( snow_width % 2 == 0 )); then
29      snow_width=$(( snow_width - 1 ))
30  fi
31  
32  if [ "$full_height" -le 0 ] || [ "$snow_width" -le 0 ]; then
33      echo "Аргументи повинні бути додатними числами!" >&2
34      exit 1
35  fi
36  
37  if [ "$full_height" -lt 8 ] || [ "$snow_width" -lt 7 ]; then
38      echo "Недостатні розміри для побудови ялинки" >&2
39      exit 1
40  fi
41  
42  if (( full_height - 1 != snow_width )); then
43      echo "висота_ялинки занадто велика для заданої ширини снігу ($snow_width)" >&2
44      echo "ширина ярусів має бути на 2 менша за ширину снігу" >&2
45      exit 1
46  fi
47  
48  char='*'
49  
50  function draw_layer() {
51      local height=$1
52      local width=$2
53      local level=1
54  
55      until [ "$level" -ge "$height" ]; do
56          padding=$(( (snow_width - width) / 2 ))
57          printf "%*s" "$padding" ''
58          for (( i = 0; i < width; i++ )); do
59              printf "%s" "$char"
60          done
61          echo ''
62          width=$(( width + 2 ))
63          (( level++ ))
64          char=$([ "$char" = '*' ] && echo '#' || echo '*')
65      done
66  }
67  
68  draw_layer "$half_height" 1
69  draw_layer $(( half_height - 1 )) 3
70  
71  trunk_padding=$(( (snow_width - 3) / 2 ))
72  for i in 1 2; do
73      printf "%*s" "$trunk_padding" ''
74      printf "%s\n" '###'
75  done
76  
77  counter=1
78  while [ "$counter" -le "$snow_width" ]; do
79      printf "%s" '*'
80      (( counter++ ))
81  done
82  
83  echo ''


