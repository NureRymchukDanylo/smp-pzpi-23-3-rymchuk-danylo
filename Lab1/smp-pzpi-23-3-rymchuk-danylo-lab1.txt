Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 


Кафедра програмної інженерії
 


Звіт
з лабораторної роботи № 1
з дисципліни «Скриптові мови програмування»






Виконав:                                                           	     Перевірив:
ст. гр. ПЗПІ-23-3                                    	       	     ст. викл. Сокорчук І. П.
Римчук Д. О.







Харків 2025
1 ІСТОРІЯ ЗМІН
№
Дата
Версія звіту
Опис змін та виправлень
1
04.06.2025
0.1
Оформлено текстовий звіт

2 ЗАВДАННЯ
     - Розробити Bash-скрипт для перетворення CSV-файлу розкладу занять, експортованого із сайту cist.nure.ua, у формат, придатний для імпорту в Google Календар.
     - Реалізувати підтримку параметрів виклику: --help, --version, -q / --quiet.
     - Якщо параметри не вказані, надати користувачу меню вибору файлу та академічної групи через команду select.
     - Забезпечити конвертацію файлу у кодуванні UTF-8 (за допомогою iconv).
     - Створити механізм фільтрації та сортування списку груп та файлів (через ls, sort, uniq).
     - Вибрані записи повинні бути переформатовані у CSV-структуру Google Календаря: Subject, Start Date, Start Time, End Date, End Time, Description.
     - Заняттям автоматично присвоюється порядковий номер, окремо для лабораторних (які рахуються як два).
     - У полі Subject має бути видалено назву групи та додано номер заняття.
     - Перетворення дати та часу у формат Google Календаря з 12-годинною системою AM/PM.
     - Вивід результату у файл Google_TimeTable_??_??_20??.csv та (за потреби) у консоль.
     - Вивід повідомлень про помилки у stderr із відповідним кодом завершення.
     - Забезпечити виконання скрипта усіма користувачами з правом редагування лише для власника.
     - Обов'язково використати команди: select, ls, awk, sort, uniq, tee, cat, sed, iconv.

3 ОПИС ВИКОНАНОЇ РОБОТИ
     - Створено Bash-скрипт, що обробляє CSV-файл розкладу занять для однієї або декількох академічних груп.
     - Реалізовано логіку обробки параметрів командного рядка (--help, --version, --quiet).
     - У випадку відсутності аргументів, скрипт формує меню вибору файлу за шаблоном TimeTable_??_??_20??.csv та групи з цього файлу.
     - Застосовано iconv для перетворення кодування Windows-1251 у UTF-8 та обробку символів переносу рядка.
     - Дані сортуються за алфавітом і датою, групи — унікалізуються через sort та uniq.
     - Здійснюється перевірка доступності файлу та наявності групи у ньому, обробка помилок реалізована через stderr.
     - За допомогою awk виділено поля, переформатовано дату та час, створено Subject з номером заняття.
     - Готові результати експортуються у новий файл Google_TimeTable_??_??_20??.csv.
     - Реалізовано вивід результатів через tee (у файл і консоль) або лише у файл (режим quiet).
     - Результати роботи подано у вигляді рисунків Б1-Б4.

4 ВИСНОВКИ
     - У результаті виконання лабораторної роботи було створено Bash-скрипт для трансформації розкладу занять у формат Google Календаря. 
     - Отримано навички обробки CSV-даних, використання утиліт Bash (awk, sed, iconv, tee, sort, uniq). 
     - Реалізовано інтерактивний інтерфейс вибору файлів та груп. 
     - Забезпечено повну відповідність формату Google Календаря та підтримку 12-годинного формату часу. 
     - Скрипт підтримує обробку помилок та коректне завершення з відповідними кодами. 
     - Рішення відповідає технічним та функціональним вимогам лабораторної роботи.








ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://www.youtube.com/watch?v=wwJ6b07BCig

Хронологічний опис відеозапису:
00:00 — Вступ та опис завдання.
00:50 — Початок пояснення коду починаючи з функцій показ допомоги, показ версії та перевірки аргументів.
03:35 — Пояснення перевірок та select для назви файлу.
04:20 — Пояснення про початкове форматування файлу у вигляді конвертація кодування, заміни \r на \n, вивід починаючи з 2 строки та сортування за назвою, датою, часом.
06:52 — Пояснення головного awk скрипта для обробки файлу який записаний в зміну.
10:20 — Тестування скрипта.



ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 — Використання без аргументів, відображається список всіх відповідних файлів


Рисунок Б.2 — Обрано файл під номером 1


Рисунок Б.3 — Обрано 3 групу та згенерувало без тихого режиму


Рисунок Б.4 — В тихому режимі з використанням аргументів


ДОДАТОК В
Програмний код
Головний скрипт на bash з awk
GitHub репозиторій: https://github.com/NureRymchukDanylo/smp-pzpi-23-3-rymchuk-danylo/blob/main/Lab1/smp-pzpi-23-3-rymchuk-danylo-lab1/smp-pzpi-23-3-rymchuk-danylo-lab1-code.sh
 1  #!/bin/bash
 2  
 3  username=$(whoami)
 4  script="${username}-task2"
 5  version="1.0"
 6  
 7  print_help() {
 8      cat <<EOF
 9  Використання:
10    ${script} [--help | --version] | [[-q|--quiet] [академ_група] файл_із_cist.csv]
11  
12  Опції:
13    --help       Показати цю довідку і завершити роботу
14    --version    Вивести версію скрипта і завершити роботу
15    -q, --quiet  Не виводити інформацію у стандартний потік виведення
16  EOF
17  }
18  
19  print_version() {
20      echo "${script} версія ${version}"
21  }
22  
23  quiet=false
24  group=""
25  csv=""
26  
27  # Аргументи
28  while [[ $# -gt 0 ]]; do
29      case "$1" in
30          --help)
31              print_help; exit 0 ;;
32          --version)
33              print_version; exit 0 ;;
34          -q|--quiet)
35              quiet=true; shift ;;
36          *)
37              if [[ -z "$group" ]]; then
38                  group="$1"
39              elif [[ -z "$csv" ]]; then
40                  csv="$1"
41              fi
42              shift ;;
43      esac
44  done
45  
46  if [[ -z "$csv" ]]; then
47      echo "Виберіть CSV-файл із розкладом:"
48      select csv in $(ls TimeTable_??_??_20??.csv 2>/dev/null | sort); do
49          [[ -n "$csv" ]] && break
50      done
51  fi
52  
53  [[ ! -r "$csv" ]] && {
54      echo "Помилка: файл '$csv' не знайдено або він недоступний" >&2
55      exit 1
56  }
57  
58  temp="Temp_$csv"
59  if ! iconv -f WINDOWS-1251 -t UTF-8 "$csv" |
60       tr '\r' '\n' |
61       awk 'NR > 1 {print}' |
62       sort -t',' -k1,1 -k2.8,2.11n -k2.5,2.6n -k2.2,2.3n -k3.2,3.3n -k3.5,3.6n > "$temp"
63  then
64      echo "Помилка: не вдалося обробити файл '$csv'" >&2
65      exit 1
66  fi
67  
68  groups=($(awk -F' ' '$2 ~ /-/ {gsub(/"/, "", $1); print $1}' "$temp" | uniq))
69  
70  if [[ -z "$group" ]]; then
71      if (( ${#groups[@]} == 1 )); then
72          group="${groups[0]}"
73          echo "Автоматично обрано групу"
74      else
75          echo "Виберіть академічну групу:"
76          select group in "${groups[@]}"; do
77              [[ -n "$group" ]] && break
78          done
79      fi
80  fi
81  
82  if ! grep -q "$group" "$temp"; then
83      echo "Групу '$group' не знайдено у файлі '$csv'" >&2
84      if (( ${#groups[@]} == 1 )); then
85          group="${groups[0]}"
86          echo "Автоматично обрано групу"
87      else
88          echo "Виберіть академічну групу:"
89          select group in "${groups[@]}"; do
90              [[ -n "$group" ]] && break
91          done
92      fi
93  fi
94  
95  output_file="Google_${csv}"
96  awk_script='
97  BEGIN {
98      OFS = ","; print "Subject,Start Date,Start Time,End Date,End Time,Description"
99  }
100 $1 ~ ("^\"" group) {
101     for (i = 1; i <= NF; i++) gsub(/"/, "", $i)
102     gsub(group " - ", "", $1)
103     split($2, sd, "."); split($4, ed, ".")
104     split($3, st, ":"); split($5, et, ":")
105     start_date = sd[2] "/" sd[1] "/" sd[3]
106     end_date   = ed[2] "/" ed[1] "/" ed[3]
107     sh = st[1] + 0; eh = et[1] + 0
108     sfx = (sh < 12) ? "AM" : "PM"
109     efx = (eh < 12) ? "AM" : "PM"
110     sh = (sh % 12 == 0) ? 12 : sh % 12
111     eh = (eh % 12 == 0) ? 12 : eh % 12
112     start_time = sprintf("%02d:%s %s", sh, st[2], sfx)
113     end_time   = sprintf("%02d:%s %s", eh, et[2], efx)
114     split($1, p, " ")
115     key = p[1] " " p[2]
116     if ($1 ~ / Лб/) {
117         if (!(key in lab)) { lab[key] = 1; cnt[key] = 1 }
118         else {
119             lab[key]++
120             if (lab[key] > 2) { lab[key] = 1; cnt[key]++ }
121         }
122     } else {
123         if (!(key in cnt)) cnt[key] = 1
124         else cnt[key]++
125     }
126     subj = "\"" $1 "; №" cnt[key] "\""
127     print subj, start_date, start_time, end_date, end_time, "\"" $12 "\""
128 }'
129 
130 if $quiet; then
131     awk -F'",' -v group="$group" "$awk_script" "$temp" > "$output_file"
132     status=$?
133 else
134     awk -F'",' -v group="$group" "$awk_script" "$temp" | tee "$output_file"
135     status=${PIPESTATUS[0]}
136 fi
137 
138 rm -f "$temp"
139 
140 [[ $status -ne 0 ]] && {
141     echo "Помилка: невдала обробка файла" >&2
142     exit 1
143 }
144 
145 echo "Готовий файл: $output_file"
146 exit 0


